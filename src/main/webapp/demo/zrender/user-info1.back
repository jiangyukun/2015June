function FriendsInfo(callback) {
    'use strict';
    // 用于动画效果，给定一个区间，连续随机的变化
    function Range(start, end, delta) {
        var beforeStart = null, beforeEnd = null, beforeDelta = null;
        delta = delta || 0.02;
        if (end < start) {
            throw new Error('end must bigger than start');
        }
        var current = 0, before;
        var currentRandom = Math.ceil(Math.random() * (end - start) + start);
        return {
            get: function () {
                if (currentRandom < start) {
                    currentRandom = start;
                } else if (currentRandom > end) {
                    currentRandom = end;
                }
                if (Math.abs(currentRandom - current) < 0.01) {
                    before = currentRandom;
                    currentRandom = Math.ceil(Math.random() * (end - start) + start);
                    current = before;
                    if (beforeDelta)
                        delta = beforeDelta;
                }
                if (currentRandom > current) {
                    current += delta;
                } else {
                    current -= delta;
                }
                return current;
            },
            change: function (newStart, newEnd) {
                beforeStart = start;
                beforeEnd = end;
                beforeDelta = delta;
                start = newStart;
                end = newEnd;
            },
            restore: function (newDelta) {
                if (beforeStart == null || beforeEnd == null) {
                    console.log('warn: unnecessary restore call');
                    return;
                }
                start = beforeStart;
                end = beforeEnd;
                delta = newDelta;
                beforeStart = beforeEnd = null;
            }
        }
    }

    +function (window, Math, undefined) {
        var fileLocation = 'pages/report/js/canvas/zrender1';
        require.config({
            paths: {
                zrender: fileLocation,
                'zrender/shape/Util': fileLocation,
                'zrender/shape/Base': fileLocation,
                'zrender/shape/Circle': fileLocation,
                'zrender/shape/Text': fileLocation,
                'zrender/shape/Line': fileLocation,
                'zrender/shape/Image': fileLocation,
                'zrender/shape/Cellular': fileLocation,
                'zrender/shape/DoubleArcAround': fileLocation
            }
        });

        var constants = {
            CIRCLE_RAD: 2 * Math.PI, //圆的弧度
            CLOCK_WISE: 1, //顺时针方向
            ANTI_CLOCK_WISE: -1, // 逆时针方向
            BOUNCE: 2, // 反弹
            BOUNCE_CLOCK_WISE: 3, // 顺时针反弹
            BOUNCE_ANTI_CLOCK_WISE: 4 // 逆时针反弹
        };
        var config = {
            maxImageFriendCount: 10, // 显示好友头像最大好友数
            maxFriendRadius: 20,
            maxLineLength: 80,
            minRotationDistance: 45, // 最小滑动距离，如果小于则显示反弹效果
            initRadian: constants.CIRCLE_RAD / 3,
            selfRadius: 25,
            currentFriendRadius: 30,
            selfColor: 'rgba(106,205,240,0.8)',
            friendColor: 'rgba(226,119,137,0.8)',
            lineColor: 'rgba(220,161,119,0.3)',
            friendMainColor: 'rgba(91,187,255,0.8)',
            extraColor: 'rgb(91,187,255)'
        };
        var zr, LineShape, CircleShape, CellularShape, DoubleArcAroundShape, TextShape, ImageShape;
        var i, friendCount,// 好友数量
            num,// 用于好友所在圆圈的旋转
            lineLengthCurrent,// 开始时的动画
            angleRad,//相邻2个好友之间的弧度
            lines,//好友与自身之间的线条
            friends,// 好友
            imageFriends,// 图片显示的好友
            cellular,// 扇形
            cellulars,//5个扇形组成的蜂窝形状
            selfRadius = config.selfRadius,// 中心圆半径
            lineLength,// 线长度
            currentFriendRadius = config.currentFriendRadius;//
        var width, height, friendRadius, centerX, centerY;
        var rotateFlag,// 旋转标志
            friendAnimationId,// 好友动画Id，
            friendAnimationStop,// 暂停好友动画标志
            friendShape, positionX, positionY;
        var userId = null, deep = 0, // 好友层级
            deepInCurrent = [],
            deepInUserId = [],
            friendsData;
        require([
            'zrender',
            'zrender/shape/Line',
            'zrender/shape/Circle',
            'zrender/shape/Cellular',
            'zrender/shape/DoubleArcAround',
            'zrender/shape/Text',
            'zrender/shape/Image'
        ], function (zrender) {
            LineShape = require('zrender/shape/Line');
            CircleShape = require('zrender/shape/Circle');
            CellularShape = require('zrender/shape/Cellular');
            DoubleArcAroundShape = require('zrender/shape/DoubleArcAround');
            TextShape = require('zrender/shape/Text');
            ImageShape = require('zrender/shape/Image');
            zr = zrender.init(document.getElementById('face'));
            width = Math.ceil(zr.getWidth());
            height = Math.ceil(zr.getHeight());
            lineLength = parseInt(width / 4 < config.maxLineLength ? width / 4 : config.maxLineLength);
            fetchDataAndRender(userId);
        });

        function fetchDataAndRender(id) {
            $.ajax({
                url: callback(id),
                type: 'get',
                success: function (data) {
                    deepInUserId[deep] = data.id;
                    friendsData = data;
                    renderCanvas(data);
                },
                dataType: 'json'
            });
        }

        function initData(data) {
            lineLengthCurrent = 30;
            if (typeof deepInCurrent[deep] == 'number') {
                num = deepInCurrent[deep];
            } else {
                num = 0;
            }
            friendCount = data.friends.length;
            friendRadius = (friendCount == 0 ? config.maxFriendRadius : Math.sin(constants.CIRCLE_RAD / friendCount / 3) * lineLength);
            friendRadius = friendRadius > config.maxFriendRadius ? config.maxFriendRadius : friendRadius;
            angleRad = constants.CIRCLE_RAD / friendCount;
            centerX = width / 2;
            centerY = lineLength * 3 - 8;
            lines = [];
            friends = [];
            cellulars = [];
            imageFriends = [];
            friendAnimationStop = false;
            rotateFlag = false;
        }

        function renderCanvas(data) {
            initData(data);
            var selfCircle = new ImageShape({
                zlevel: 1,
                style: {
                    x: centerX - selfRadius,
                    y: centerY - selfRadius,
                    width: 2 * selfRadius,
                    height: 2 * selfRadius,
                    image: data.imageUrl
                },
                clickable: deep != 0,
                onclick: selfClick,
                clipShape: new CircleShape({
                    style: {
                        x: centerX,
                        y: centerY,
                        r: selfRadius
                    }
                })
            });

            var selfCircleAround = new CircleShape({
                zlevel: 0,
                style: {
                    x: centerX,
                    y: centerY,
                    r: selfRadius + 2,
                    brushType: 'stroke',
                    strokeColor: config.selfColor,
                    lineWidth: 4
                },
                hoverable: false
            });

            for (i = 0; i < friendCount; i++) {
                lines[i] = new LineShape({
                    zlevel: 5,
                    rotation: [initRotationRadian(), centerX, centerY],
                    style: {
                        xStart: getLineStartX(i),
                        yStart: getLineStartY(i),
                        xEnd: getFriendPositionX(i) - friendRadius,
                        yEnd: getFriendPositionY(i) - friendRadius,
                        strokeColor: config.lineColor,
                        lineWidth: 1
                    },
                    hoverable: false
                });
                friends[i] = new CircleShape({
                    rotation: [initRotationRadian(), centerX, centerY],
                    zlevel: 5,
                    style: {
                        x: getFriendPositionX(i),
                        y: getFriendPositionY(i),
                        r: getRadius(),
                        brushType: 'fill',
                        color: i == getNum() ? config.friendMainColor : config.friendColor
                    },
                    hoverable: false
                });
            }
            friendShape = new FriendShape(friends, false);

            for (i = 0; i < 5; i++) {
                cellular = new CellularShape({
                    style: {
                        x: getCellularPositionX(),
                        y: getCellularPositionY(),
                        angle: constants.CIRCLE_RAD / 3,
                        colorStyle: config.extraColor,
                        borderWidth: (i + 3) / 2,
                        radius: 15 + i * 6
                    }
                });
                cellulars[i] = cellular;
            }

            var friendCircleX = getFriendMainPositionX();
            var friendCircleY = getFriendMainPositionY();
            var friendToShowCircle = new ImageShape({
                zlevel: 3,
                style: {
                    x: friendCircleX - currentFriendRadius,
                    y: friendCircleY - currentFriendRadius,
                    width: 2 * currentFriendRadius,
                    height: 2 * currentFriendRadius,
                    image: ''
                },
                hoverable: false,
                clickable: true,
                onclick: friendClick,
                clipShape: new CircleShape({
                    style: {
                        x: friendCircleX,
                        y: friendCircleY,
                        r: currentFriendRadius
                    }
                })
            });

            var doubleArcAround = new DoubleArcAroundShape({
                style: {
                    x: friendCircleX,
                    y: friendCircleY,
                    r: currentFriendRadius * 1.3,
                    colorStyle: config.extraColor
                }
            });
            var textPositionX = centerX;
            var textPositionY = centerY - lineLength * 2.6;
            var sex = new ImageShape({
                style: {
                    x: textPositionX - 20,
                    y: textPositionY + 10,
                    width: 12,
                    height: 12,
                    image: ''
                }
            });
            // 名称
            var friendName = new TextShape({
                style: {
                    x: textPositionX,
                    y: textPositionY,
                    text: '',
                    color: '#323232',
                    textFont: 'normal 23px verdana',
                    textBaseline: 'top'
                },
                hoverable: false
            });
            var city = new TextShape({
                style: {
                    x: textPositionX,
                    y: textPositionY + 30,
                    text: '',
                    color: '#666666',
                    textFont: 'normal 16px verdana',
                    textBaseline: 'top'
                },
                hoverable: false
            });
            // 阅读人数
            var friendReaderNumber = new TextShape({
                style: {
                    x: textPositionX,
                    y: textPositionY + 55,
                    color: '#666666',
                    text: '',
                    textFont: 'normal 16px verdana',
                    textBaseline: 'top'
                },
                hoverable: false
            });
            // 转发人数
            var friendForwardNumber = new TextShape({
                style: {
                    x: textPositionX,
                    y: textPositionY + 75,
                    color: '#666666',
                    text: '',
                    textFont: 'normal 16px verdana',
                    textBaseline: 'top'
                },
                hoverable: false
            });
            var backTip = new ImageShape({
                style: {
                    x: centerX + lineLength,
                    y: centerY - lineLength * 1.3,
                    width: 75,
                    height: 75,
                    image: 'pages/report/images/back.png'
                },
                clickable: true,
                onclick: backTipClick
            });
            var emptyTip = new TextShape({
                style: {
                    x: friendCircleX,
                    y: centerY - lineLength * 1.2,
                    text: '无转发数',
                    color: '#323232',
                    textFont: 'normal 23px verdana',
                    textBaseline: 'top'
                }
            });

            addMain();
            zr.render(renderComplete);

            // 初始化完成
            function renderComplete() {
                var id = window.setInterval(function () {
                    if (lineLengthCurrent == lineLength) {
                        window.clearInterval(id);
                        zr.delShape(lines);
                        if (friendCount != 0) {
                            //showFriendHead();
                            addExtra();
                            friendAnimation();
                        }
                        addBackTip();
                        addEmptyTip();
                        return;
                    }
                    lineLengthCurrent++;
                    for (i = 0; i < friendCount; i++) {
                        var line = lines[i];
                        var friendCenterX = getFriendPositionX(i);
                        var friendCenterY = getFriendPositionY(i);
                        line.style.xEnd = friendCenterX;
                        line.style.yEnd = friendCenterY;
                        zr.modShape(line);

                        var circle = friends[i];
                        circle.style.x = friendCenterX;
                        circle.style.y = friendCenterY;
                        circle.style.r = getRadius();
                        zr.modShape(circle);
                    }
                    zr.refresh();
                }, 10);
            }

            function friendAnimation() {
                var rangeX = [], rangeY = [], rangeR = [];
                var r = [];
                var before;
                for (i = 0; i < friendCount; i++) {
                    rangeX[i] = new Range(-friendRadius / 3, friendRadius / 3);
                    rangeY[i] = new Range(-friendRadius / 3, friendRadius / 3);
                    rangeR[i] = new Range(-friendRadius / 3, 0);
                    r[i] = getRadius();
                }
                refreshPosition();
                friendAnimationId = window.setInterval(function () {
                    if (rotateFlag || friendAnimationStop) return;
                    var current = getNum();
                    for (i = 0; i < friendCount; i++) {
                        var circle = friendShape.get(i);
                        if (current != before) {
                            if (current == i) {
                                //console.log('change...' + i);
                                rangeR[i].change(0, r[i] / 3);
                                if (before != undefined) {
                                    //console.log('restore...' + before);
                                    rangeR[before].restore(0.1);
                                }
                            }
                        }
                        var newX = positionX[i] + rangeX[i].get();
                        var newY = positionY[i] + rangeY[i].get();
                        var newR = r[i] + rangeR[i].get();
                        if (friendShape.isImage()) {
                            circle.style.x = newX - newR;
                            circle.style.y = newY - newR;
                            circle.style.width = 2 * newR;
                            circle.style.height = 2 * newR;
                            circle.clipShape.style.x = newX;
                            circle.clipShape.style.y = newY;
                            circle.clipShape.style.r = newR;
                        } else {
                            circle.style.x = newX;
                            circle.style.y = newY;
                            circle.style.r = newR;
                        }
                        zr.modShape(circle);
                    }
                    before = current;
                    zr.refresh();
                }, 10);
            }

            function refreshPosition() {
                positionX = [];
                positionY = [];
                for (i = 0; i < friendCount; i++) {
                    positionX[i] = getFriendPositionX(i);
                    positionY[i] = getFriendPositionY(i);
                }
            }

            function showFriendHead() {
                if (friendCount > config.maxImageFriendCount) {
                    return;
                }
                for (i = 0; i < friendCount; i++) {
                    var x = getFriendPositionX(i);
                    var y = getFriendPositionY(i);
                    var r = getRadius();
                    imageFriends[i] = new ImageShape({
                        rotation: [initRotationRadian(), centerX, centerY],
                        zlevel: 5,
                        style: {
                            x: x - r,
                            y: y - r,
                            width: 2 * r,
                            height: 2 * r,
                            image: getImageUrl(i)
                        },
                        hoverable: false,
                        clipShape: new CircleShape({
                            style: {
                                x: x,
                                y: y,
                                r: r
                            }
                        })
                    });
                    zr.delShape(friends[i].id);
                    zr.addGroup(imageFriends[i]);
                }
                friendShape = new FriendShape(imageFriends, true);
            }

            function selfClick() {
                friendAnimationStop = true;
                selfCircle.zlevel = 99;
                zr.modShape(selfCircle);
                zr.refresh();
                selfClickAnimation(selfCircle.id);
                selfClickAnimation(selfCircleAround.id, true);
            }

            function selfClickAnimation(shapeId, done) {
                zr.animate(shapeId).when(1000, {
                    position: [friendCircleX - centerX, friendCircleY - centerY]
                }).done(function () {
                    if (!done) return;
                    deleteAll();
                    window.clearInterval(friendAnimationId);
                    deep--;
                    fetchDataAndRender(deepInUserId[deep]);
                }).start();
            }

            function friendClick() {
                friendAnimationStop = true;
                friendClickAnimation(friendToShowCircle.id);
                for (i = 0; i < 5; i++) {
                    friendClickAnimation(cellulars[i].id);
                }
                friendClickAnimation(doubleArcAround.id);
                var currentFriend = friendShape.get(getNum());
                friendClickAnimation(currentFriend.id, true);
            }

            function friendClickAnimation(shapeId, done) {
                var matrix = {
                    scale: [0, 0, centerX, centerY],
                    rotation: [0, centerX, centerY]
                };
                zr.animate(shapeId).when(1000, matrix).done(function () {
                    if (!done) return;
                    deleteAll();
                    window.clearInterval(friendAnimationId);
                    deep++;
                    fetchDataAndRender(friendsData.friends[getNum()].id);
                }).start();
            }

            function backTipClick() {
                deleteAll();
                window.clearInterval(friendAnimationId);
                deep = 0;
                fetchDataAndRender(deepInUserId[deep]);
            }

            function rotate(direction) {
                if (rotateFlag || !direction) return;
                rotateFlag = true;
                switch (direction) {
                    case constants.CLOCK_WISE:
                        num--;
                        doRotate();
                        break;
                    case constants.ANTI_CLOCK_WISE:
                        num++;
                        doRotate();
                        break;
                    case constants.BOUNCE:
                    case constants.BOUNCE_CLOCK_WISE:
                    case constants.BOUNCE_ANTI_CLOCK_WISE:
                        doBounce(direction);
                        break;
                    default:
                        break;
                }
            }

            function doRotate() {
                deleteExtra();
                deepInCurrent[deep] = num;
                for (i = 0; i < friendCount; i++) {
                    if (friendShape.isNotImage()) {
                        friends[i].style.color = config.friendColor;
                        zr.modShape(friends[i]);
                        zr.refresh();
                    }
                    +function (i) {
                        zr.animate(friendShape.get(i).id).when(300, {
                            rotation: [rotateAngele(), centerX, centerY]
                        }).done(function () {
                            if (i == friendCount - 1) {
                                if (friendShape.isNotImage()) {
                                    var n = getNum();
                                    friends[n].style.color = config.friendMainColor;
                                    zr.modShape(friends[n]);
                                }
                                addExtra();
                                rotateFlag = false;
                                refreshPosition();
                            }
                        }).start();
                    }(i);
                }
            }

            function doBounce(direction) {
                var bounceRadian = angleRad / 5;
                if (direction == constants.BOUNCE_CLOCK_WISE) {
                    bounceRadian = -bounceRadian;
                }
                for (i = 0; i < friendCount; i++) {
                    +function (i) {
                        zr.animate(friendShape.get(i).id).when(200, {
                            rotation: [rotateAngele() + bounceRadian, centerX, centerY]
                        }).when(500, {
                            rotation: [rotateAngele() - bounceRadian, centerX, centerY]
                        }).when(900, {
                            rotation: [rotateAngele(), centerX, centerY]
                        }).done(function () {
                            if (i == friendCount - 1) {
                                rotateFlag = false;
                            }
                        }).start();
                    }(i);
                }
            }

            function addMain() {
                zr.addGroup(selfCircle);
                zr.addShape(selfCircleAround);
                for (i = 0; i < friendCount; i++) {
                    zr.addShape(lines[i]);
                    zr.addShape(friends[i]);
                }
            }

            function deleteAll() {
                zr.delGroup(selfCircle);
                zr.delShape(selfCircleAround);
                for (i = 0; i < friendCount; i++) {
                    zr.delShape(lines[i]);
                    zr.delShape(friendShape.get(i));
                }
                deleteExtra();
                deleteBackTip();
                deleteEmptyTip();
            }

            function deleteExtra() {
                zr.delShape(cellulars);
                zr.delShape(doubleArcAround);
                zr.delGroup(friendToShowCircle);
                zr.delShape(sex);
                zr.delShape(friendName);
                zr.delShape(city);
                zr.delShape(friendReaderNumber);
                zr.delShape(friendForwardNumber);
            }

            function addExtra() {
                var friend = friendsData.friends[getNum()];
                addCellulars();
                zr.addShape(doubleArcAround);
                friendToShowCircle.style.image = getImageUrl(getNum());
                zr.addShape(friendToShowCircle);
                if (friend.sex != '2') {
                    sex.style.image = 'pages/report/images/male.png';
                } else {
                    sex.style.image = 'pages/report/images/female.png';
                }
                zr.addShape(sex);
                friendName.style.text = friend.name;
                zr.addShape(friendName);
                var region = friend.province + friend.city;
                if (region) {
                    city.style.text = region;
                }
                else {
                    city.style.text = '区域未知';
                }
                zr.addShape(city);
                friendReaderNumber.style.text = '阅读人数  ' + friend.read || 0;
                zr.addShape(friendReaderNumber);
                friendForwardNumber.style.text = '转发人数  ' + friend.transmit || 0;
                zr.addShape(friendForwardNumber);
            }

            function addBackTip() {
                if (deep) {
                    zr.addShape(backTip);
                }
            }

            function deleteBackTip() {
                if (deep) {
                    zr.delShape(backTip);
                }
            }

            function addEmptyTip() {
                if (friendCount == 0)
                    zr.addShape(emptyTip);
            }

            function deleteEmptyTip() {
                if (friendCount == 0)
                    zr.delShape(emptyTip);
            }

            function addCellulars() {
                zr.addShape(cellulars[0]);
                window.setTimeout(function () {
                    zr.addShape(cellulars[1]);
                }, 20);
                window.setTimeout(function () {
                    zr.addShape(cellulars[2]);
                }, 50);
                window.setTimeout(function () {
                    zr.addShape(cellulars[3]);
                }, 90);
                window.setTimeout(function () {
                    zr.addShape(cellulars[4]);
                }, 140);
            }

            // 事件处理
            var startX, startY, endX, endY, handOrSkip, hand = 1, skip = 2;
            $('#face').off().on('touchstart', function ($event) {
                var touch = $event.originalEvent.touches[0];
                startX = touch.clientX;
                startY = touch.clientY;
                endX = endY = -1;
                handOrSkip = 0;
            }).on('touchmove', function ($event) {
                var touch = $event.originalEvent.touches[0];
                endX = touch.clientX;
                endY = touch.clientY;
                if (handOrSkip == skip) return;
                if (handOrSkip == hand) {
                    return false;
                }
                if (Math.abs(endX - centerX) > 30) {
                    handOrSkip = hand;
                    return false;
                } else {
                    handOrSkip = skip;
                }
            }).on('touchend', function () {
                if (handOrSkip != hand) {
                    return;
                }
                // 叉乘计算点到直线的距离
                var line = {
                    x: endX - startX,
                    y: endY - startY
                };
                var vector1 = {
                    x: centerX - startX,
                    y: centerY - startY
                };
                var vector2 = {
                    x: endX - startX,
                    y: endY - startY
                };
                var area = (vector1.x * vector2.y - vector2.x * vector1.y);
                var distance = Math.sqrt(Math.pow(line.x, 2) + Math.pow(line.y, 2));
                var pointToLineDistance = area / distance;
                if (Math.abs(pointToLineDistance) * 2 > lineLength && distance > config.minRotationDistance) {
                    rotate(pointToLineDistance < 0 ? constants.CLOCK_WISE : constants.ANTI_CLOCK_WISE);
                } else {
                    rotate(pointToLineDistance < 0 ? constants.BOUNCE_CLOCK_WISE : constants.BOUNCE_ANTI_CLOCK_WISE);
                }
            });

            function FriendShape(shapes, isImage) {
                if (!shapes)
                    throw new Error('[shapes] must not be null');
                if (isImage && typeof isImage != 'boolean')
                    throw new Error('please provide [isImage] a boolean value');
                if (isImage == undefined) {
                    isImage = !(shapes[0] instanceof CircleShape);
                }
                function checkIndex(index) {
                    if (index < 0 || index >= shapes.length) throw new Error('illegal index');
                }

                return {
                    isImage: function () {
                        return isImage;
                    },
                    isNotImage: function () {
                        return !isImage;
                    },
                    get: function (index) {
                        checkIndex(index);
                        return shapes[index];
                    }
                }
            }

            function getRadius() {
                return lineLengthCurrent * friendRadius / lineLength;
            }

            function getNum() {
                return (-num % friendCount + friendCount) % friendCount;
            }

            function rotateAngele() {
                return num * angleRad;
            }

            function initRotationRadian() {
                return num * angleRad;
            }

            function getCellularPositionX() {
                return centerX + (lineLength + currentFriendRadius / 2) * Math.cos(config.initRadian);
            }

            function getCellularPositionY() {
                return centerY - (lineLength + currentFriendRadius / 2) * Math.sin(config.initRadian);
            }

            function getLineStartX(n) {
                return centerX + (selfRadius + 2) * Math.cos(angleRad * n + config.initRadian);
            }

            function getLineStartY(n) {
                return centerY - (selfRadius + 2) * Math.sin(angleRad * n + config.initRadian);
            }

            function getFriendPositionX(n) {
                return centerX + lineLengthCurrent * Math.cos(angleRad * n + config.initRadian);
            }

            function getFriendPositionY(n) {
                return centerY - lineLengthCurrent * Math.sin(angleRad * n + config.initRadian);
            }

            function getFriendMainPositionX() {
                return centerX + (lineLength * 2 + currentFriendRadius) * Math.cos(config.initRadian);
            }

            function getFriendMainPositionY() {
                return centerY - (lineLength * 2 + currentFriendRadius) * Math.sin(config.initRadian);
            }

            function getImageUrl(i) {
                return friendsData.friends[i].imageUrl;
            }
        } // end renderCanvas
    }(window, Math);
}
